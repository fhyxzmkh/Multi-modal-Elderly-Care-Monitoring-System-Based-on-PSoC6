/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SplatImport } from './routes/$'
import { Route as IndexImport } from './routes/index'
import { Route as WheelchairIndexImport } from './routes/wheelchair/index'
import { Route as WelcomeIndexImport } from './routes/welcome/index'
import { Route as PhysiologicalIndexImport } from './routes/physiological/index'
import { Route as NotificationsIndexImport } from './routes/notifications/index'
import { Route as IntelligentIndexImport } from './routes/intelligent/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as FallDetectionIndexImport } from './routes/fall-detection/index'
import { Route as EmergencyIndexImport } from './routes/emergency/index'
import { Route as AuthRegisterIndexImport } from './routes/auth/register/index'
import { Route as AuthLoginIndexImport } from './routes/auth/login/index'

// Create/Update Routes

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WheelchairIndexRoute = WheelchairIndexImport.update({
  id: '/wheelchair/',
  path: '/wheelchair/',
  getParentRoute: () => rootRoute,
} as any)

const WelcomeIndexRoute = WelcomeIndexImport.update({
  id: '/welcome/',
  path: '/welcome/',
  getParentRoute: () => rootRoute,
} as any)

const PhysiologicalIndexRoute = PhysiologicalIndexImport.update({
  id: '/physiological/',
  path: '/physiological/',
  getParentRoute: () => rootRoute,
} as any)

const NotificationsIndexRoute = NotificationsIndexImport.update({
  id: '/notifications/',
  path: '/notifications/',
  getParentRoute: () => rootRoute,
} as any)

const IntelligentIndexRoute = IntelligentIndexImport.update({
  id: '/intelligent/',
  path: '/intelligent/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any)

const FallDetectionIndexRoute = FallDetectionIndexImport.update({
  id: '/fall-detection/',
  path: '/fall-detection/',
  getParentRoute: () => rootRoute,
} as any)

const EmergencyIndexRoute = EmergencyIndexImport.update({
  id: '/emergency/',
  path: '/emergency/',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterIndexRoute = AuthRegisterIndexImport.update({
  id: '/auth/register/',
  path: '/auth/register/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  id: '/auth/login/',
  path: '/auth/login/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/emergency/': {
      id: '/emergency/'
      path: '/emergency'
      fullPath: '/emergency'
      preLoaderRoute: typeof EmergencyIndexImport
      parentRoute: typeof rootRoute
    }
    '/fall-detection/': {
      id: '/fall-detection/'
      path: '/fall-detection'
      fullPath: '/fall-detection'
      preLoaderRoute: typeof FallDetectionIndexImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/intelligent/': {
      id: '/intelligent/'
      path: '/intelligent'
      fullPath: '/intelligent'
      preLoaderRoute: typeof IntelligentIndexImport
      parentRoute: typeof rootRoute
    }
    '/notifications/': {
      id: '/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/physiological/': {
      id: '/physiological/'
      path: '/physiological'
      fullPath: '/physiological'
      preLoaderRoute: typeof PhysiologicalIndexImport
      parentRoute: typeof rootRoute
    }
    '/welcome/': {
      id: '/welcome/'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/wheelchair/': {
      id: '/wheelchair/'
      path: '/wheelchair'
      fullPath: '/wheelchair'
      preLoaderRoute: typeof WheelchairIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/register/': {
      id: '/auth/register/'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/emergency': typeof EmergencyIndexRoute
  '/fall-detection': typeof FallDetectionIndexRoute
  '/home': typeof HomeIndexRoute
  '/intelligent': typeof IntelligentIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/physiological': typeof PhysiologicalIndexRoute
  '/welcome': typeof WelcomeIndexRoute
  '/wheelchair': typeof WheelchairIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/auth/register': typeof AuthRegisterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/emergency': typeof EmergencyIndexRoute
  '/fall-detection': typeof FallDetectionIndexRoute
  '/home': typeof HomeIndexRoute
  '/intelligent': typeof IntelligentIndexRoute
  '/notifications': typeof NotificationsIndexRoute
  '/physiological': typeof PhysiologicalIndexRoute
  '/welcome': typeof WelcomeIndexRoute
  '/wheelchair': typeof WheelchairIndexRoute
  '/auth/login': typeof AuthLoginIndexRoute
  '/auth/register': typeof AuthRegisterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/emergency/': typeof EmergencyIndexRoute
  '/fall-detection/': typeof FallDetectionIndexRoute
  '/home/': typeof HomeIndexRoute
  '/intelligent/': typeof IntelligentIndexRoute
  '/notifications/': typeof NotificationsIndexRoute
  '/physiological/': typeof PhysiologicalIndexRoute
  '/welcome/': typeof WelcomeIndexRoute
  '/wheelchair/': typeof WheelchairIndexRoute
  '/auth/login/': typeof AuthLoginIndexRoute
  '/auth/register/': typeof AuthRegisterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/emergency'
    | '/fall-detection'
    | '/home'
    | '/intelligent'
    | '/notifications'
    | '/physiological'
    | '/welcome'
    | '/wheelchair'
    | '/auth/login'
    | '/auth/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/emergency'
    | '/fall-detection'
    | '/home'
    | '/intelligent'
    | '/notifications'
    | '/physiological'
    | '/welcome'
    | '/wheelchair'
    | '/auth/login'
    | '/auth/register'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/emergency/'
    | '/fall-detection/'
    | '/home/'
    | '/intelligent/'
    | '/notifications/'
    | '/physiological/'
    | '/welcome/'
    | '/wheelchair/'
    | '/auth/login/'
    | '/auth/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  EmergencyIndexRoute: typeof EmergencyIndexRoute
  FallDetectionIndexRoute: typeof FallDetectionIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  IntelligentIndexRoute: typeof IntelligentIndexRoute
  NotificationsIndexRoute: typeof NotificationsIndexRoute
  PhysiologicalIndexRoute: typeof PhysiologicalIndexRoute
  WelcomeIndexRoute: typeof WelcomeIndexRoute
  WheelchairIndexRoute: typeof WheelchairIndexRoute
  AuthLoginIndexRoute: typeof AuthLoginIndexRoute
  AuthRegisterIndexRoute: typeof AuthRegisterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  EmergencyIndexRoute: EmergencyIndexRoute,
  FallDetectionIndexRoute: FallDetectionIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  IntelligentIndexRoute: IntelligentIndexRoute,
  NotificationsIndexRoute: NotificationsIndexRoute,
  PhysiologicalIndexRoute: PhysiologicalIndexRoute,
  WelcomeIndexRoute: WelcomeIndexRoute,
  WheelchairIndexRoute: WheelchairIndexRoute,
  AuthLoginIndexRoute: AuthLoginIndexRoute,
  AuthRegisterIndexRoute: AuthRegisterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$",
        "/emergency/",
        "/fall-detection/",
        "/home/",
        "/intelligent/",
        "/notifications/",
        "/physiological/",
        "/welcome/",
        "/wheelchair/",
        "/auth/login/",
        "/auth/register/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/emergency/": {
      "filePath": "emergency/index.tsx"
    },
    "/fall-detection/": {
      "filePath": "fall-detection/index.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/intelligent/": {
      "filePath": "intelligent/index.tsx"
    },
    "/notifications/": {
      "filePath": "notifications/index.tsx"
    },
    "/physiological/": {
      "filePath": "physiological/index.tsx"
    },
    "/welcome/": {
      "filePath": "welcome/index.tsx"
    },
    "/wheelchair/": {
      "filePath": "wheelchair/index.tsx"
    },
    "/auth/login/": {
      "filePath": "auth/login/index.tsx"
    },
    "/auth/register/": {
      "filePath": "auth/register/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
